####################################################################################
# IC Compiler Hierarchical Reference Methodology
# Version: D-2010.03-SP2 (July 6, 2010)
# Copyright (C) 2007-2010 Synopsys All rights reserved.
####################################################################################

There are three stages in the IC Compiler Hierarchical Reference Methodology flow:
1. IC Compiler Design Planning performs hierarchical design planning based on
   virtual flat flow
2. IC Compiler performs block level implementation
3. IC Compiler performs top level implementation

Instructions to run IC Compiler Hierarchical Reference Methodology:

Step 1. Setup:
Edit common_setup.tcl, icc_setup.tcl, and Makefiles in the rm_setup directory
-----------------------------------------------------------------------------

The common_setup.tcl file contains reference methodology library and technology
variables that are common to all the product reference methodologies.

*  Make sure the path to your reference library and inputs are absolute paths.

   The reference methodology sets up subdirectories for your blocks and top-level design.
   Absolute paths are required for the subdirectories to work.

*  You can use a variable called $DESIGN_REF_DATA_PATH to manage the
   absolute paths to design data if they share a common root.

   For example:
   set DESIGN_REF_DATA_PATH 	"/user/design_data"
   set MW_REFERENCE_LIB_DIRS 	"$DESIGN_REF_DATA_PATH/lib/library"
   set TECH_FILE		"$DESIGN_REF_DATA_PATH/tech/techfile"	

The icc_setup.tcl file contains IC Compiler Hierarchical Reference Methodology
specific variables. The most important variables are

ICC_DP_PLAN_GROUPS:       Provide the module instance names to be created into plan
                          groups (future physical blocks).

                          IC Compiler will use this to create and arrange locations
                          for the blocks automatically.

ICC_DP_PLANGROUP_FILE:    Specify the plan group dump file if you want to skip the
                          auto-creation of plan groups.

                          The file should be generated by write_floorplan from your
                          existing floorplan.

If you do not provide information about which modules to use for block creation,
IC Compiler does not have sufficient information and the hierarchical flow does
not work.

ICC_DP_CTP_ANCHOR_CEL:    If you would like to try clock planning, uncomment clock
                          planning from the scripts and specify a buffer as the
                          anchor cell.

			  IC Compiler requires the anchor cell to be specified for clock planning.

The makefiles run the scripts. Edit ICC_EXEC in the makefiles.


Step 2. Hierarchical design planning:
Run Makefile_hier from working directory: make -f rm_setup/Makefile_hier hier_dp &
------------------------------------------------------------------------------------

This makefile runs hierarchical partitioning all the way from reading netlist to commit.  At the end, it prepares block and top subdirectories.

*  When it finishes, subdirectories are prepared for your blocks and top-level
   design.

   Preparation includes:

   o  Creation of subdirectories, copying of scripts and necessary files, moving of
      libraries, setting up icc_setup.tcl and common_setup.tcl.

   o  Creating preliminary ILM, FRAM for each block (before detailed block
      implementation) and linking to the top-level.

      This allows an early timing check of the top level CEL. Note: You should
      always finish block implementation to get accurate ILM and FRAM.

*  Now you will see subdirectories for all your blocks and top-level design.

   Proceed to each block for detailed implementation.

*  To use Zroute for pin assignment, set ICC_DP_USE_ZROUTE in icc_setup.tcl.

*  See the Using RMgen and Reference Methodology Scripts
   Application Note for more details on the flow and data structure.


Step 3. Block implementation:
Run Makefile from each of the block directories: make -f rm_setup/Makefile ic &
------------------------------------------------------------------------------------

This runs IC Compiler Reference Methodology for block implementation.  At the end, it generates the ILM and FRAM for the block.

*  To use Zroute for block implementation:

   % make -f rm_setup/Makefile_zrt ic

*  When all blocks are completed, you can move on to top-level integration.


Step 4. Top-level integration:
Run Makefile from top directory: make -f rm_setup/Makefile ic &
-------------------------------------------------------------------------
*  This runs IC Compiler Reference Methodology for top-level integration.

*  It is already set up to reference to the block libraries to use ILM and FRAM
   (initial or after detailed block implementation).

   Typically, this step is run after STEP 3 is completed.  However, you can run this
   step after STEP 2 to perform some early checks.

*  To use Zroute for top-level integration,

   % make -f rm_setup/Makefile_zrt ic

